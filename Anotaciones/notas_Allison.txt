4/05/2025
Se hizo primero la conexión a base datos, usando MongoDB.

-- Instalaciones --
npm install mongoose - Primera instalación SOLO para realizar la conexión con Node
npm install bcrypt - Seguridad en las contraseñas, esto va en el modelo de Usuario.
-------------------------

Se crearon como la "plantilla" que van a tener los datos para:
-Libro
-Usuario
-Comentario

--Routes--
Esto es como si crearamos una API desde 0, es decir, nosotros nos vamos 
a encargar del comportamiento de CIERTAS funciones en la API, este Routes 
va a ser necesario despues para poder manejar una interfaz con React. 

¿Cómo actúa el React?
Supongamos que el usuario desea ver sus libros leídos. El React recibe 
la solicitúd y por medio de las rutas se va a comunicar con el backend, y es 
por medio del http que Node y React piden los datos a MongoDb, MongoDB envía los datos 
a React y este los va a mostrar.

Funciones en Routes

GET -> Lo vamos a usar para mostrar una lista
POST -> Crear o agregar un libros
PUT -> Actualizar la info de un libros
DELETE -> Borrar

07/05/2025

El día de hoy se terminó de crear el routes, por lo tanto estaríamos cerca a 
realizar las pruebas. 

Además también se agregaron las conexiones a servidor y todo para que muestre
ciertos mensajes en la interfaz.

Ahora voy a realizar algunas instalaciones:
npm install express -> Hace que el servidor funcione

Ahora que funciona la conexión, lo primero que aparece en pantalla es
"Lista de libros" esto por la dirección de la ruta.

Ahora agregamos una ruta de raiz en server que va a mostrar el mensaje "¡Hola!"

Podemos empezar a probar con Postman, para hacerlo, hay que enviar una ruta 
anidada 
"http://localhost:3000/libros"

COSAS QUE SE HICIERON EN GIT PARA INICIAR REPOSITORIO EN GITHUB

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas
$ git init
Initialized empty Git repository in C:/Users/allis/OneDrive/Escritorio/orgalib_pruebas/.git/

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ git remote add origin https://github.com/lisSyke/Proyecto

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ touch .gitignore

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ node_modules/.env
bash: node_modules/.env: No such file or directory

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ git add .
warning: in the working copy of 'backend/package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'backend/package.json', LF will be replaced by CRLF the next time Git touches it

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ git commit -m "Primer commit: Subir backend del proyecto"
[master (root-commit) b76e6a6] Primer commit: Subir backend del proyecto
 10 files changed, 1304 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 backend/Models/Comentario.js
 create mode 100644 backend/Models/Libro.js
 create mode 100644 backend/Models/Usuario.js
 create mode 100644 backend/Routes/libros.js
 create mode 100644 backend/db.js
 create mode 100644 backend/package-lock.json
 create mode 100644 backend/package.json
 create mode 100644 backend/server.js
 create mode 100644 notas_Allison.txt

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (master)
$ git branch -M main

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ git push -u origin main
To https://github.com/lisSyke/Proyecto
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/lisSyke/Proyecto'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ ^C

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ git pull origin main
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
Unpacking objects: 100% (3/3), 905 bytes | 60.00 KiB/s, done.
From https://github.com/lisSyke/Proyecto
 * branch            main       -> FETCH_HEAD
 * [new branch]      main       -> origin/main
fatal: refusing to merge unrelated histories

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ git push -u origin main
To https://github.com/lisSyke/Proyecto
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/lisSyke/Proyecto'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. If you want to integrate the remote changes,
hint: use 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ ^C

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ git pull --rebase origin main
From https://github.com/lisSyke/Proyecto
 * branch            main       -> FETCH_HEAD
Successfully rebased and updated refs/heads/main.

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$ git push -u origin main
Enumerating objects: 16, done.
Counting objects: 100% (16/16), done.
Delta compression using up to 12 threads
Compressing objects: 100% (13/13), done.
Writing objects: 100% (15/15), 13.14 KiB | 2.63 MiB/s, done.
Total 15 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/lisSyke/Proyecto
   25422be..da98833  main -> main
branch 'main' set up to track 'origin/main'.

allis@computadorallis MINGW64 /c/Users/Allis/OneDrive/Escritorio/orgalib_pruebas (main)
$

/////////////////////////////////////////////////////////////////////////

Nuevos comandos a github

git checkout -b actualizacion_final – Crea y cambia a una nueva rama llamada actualizacion_final.

git add . – Agrega todos los archivos al área de preparación (staging).

git commit -m "Actualización para conectar al main" – Crea un commit con el mensaje "Actualización para conectar al main".

git push -u origin actualizacion_final – Sube la nueva rama actualizacion_final al remoto y la asocia.

git remote -v – Muestra las URLs de los repositorios remotos configurados.

git branch – Muestra las ramas locales.

git branch -r – Muestra las ramas remotas.

git log --oneline --graph --all – Muestra el historial de commits como un gráfico resumido.

git checkout -b actualizacion_nueva origin/actualizacion_nueva – Crea y cambia a una nueva rama local basada en origin/actualizacion_nueva.

git push – Sube cambios al repositorio remoto (en la rama actual).

git checkout actualizacion nueva – (Error de sintaxis) Intenta cambiar a actualizacion nueva, pero falta guion bajo.

git checkout actualizacion_nueva – Cambia correctamente a la rama actualizacion_nueva.

git push -u origin actualizacion_nueva --force – Fuerza el push de la rama actualizacion_nueva al remoto.

git checkout main – Cambia a la rama main.

git merge actualizacion_nueva --allow-unrelated-histories – Fusiona actualizacion_nueva en main, incluso si no tienen historia común.

git push origin main – Sube los cambios de main al repositorio remoto.

git status – Muestra el estado actual del repositorio (archivos modificados, etc.).

git add notas_Allison – Agrega el archivo notas_Allison al staging (si existiera sin extensión).

git add notas_Allison.txt – Agrega el archivo notas_Allison.txt al staging.

git add backend/Models/Comentarios.js – Agrega Comentarios.js al staging.

git add backend/Models/Comentario.js – Agrega Comentario.js al staging.

git add backend/Routes/libros.js – Agrega libros.js al staging.

git commit -m "Conflictos resueltos" – Crea un commit con el mensaje "Conflictos resueltos".

git push origin main – Sube los cambios de la rama main al repositorio remoto.

//////////////////////////////////////////////////////////////////////////////////

